name: Update CDS Proxy Data

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to push to the repo
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create directories
        run: mkdir -p scripts data

      - name: Create fetcher script
        run: |
          cat > scripts/fetch-cds-data.js << 'EOF'
          const fs = require('fs');
          const https = require('https');

          const config = JSON.parse(fs.readFileSync('./config/countries.json', 'utf8'));
          const YEARS = 3;
          const cutoffDate = new Date();
          cutoffDate.setFullYear(cutoffDate.getFullYear() - YEARS);
          const cutoffStr = cutoffDate.toISOString().split('T')[0];

          // Generic HTTPS fetch
          function fetchUrl(url) {
            return new Promise((resolve, reject) => {
              https.get(url, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => resolve(data));
                res.on('error', reject);
              }).on('error', reject);
            });
          }

          // Parse FRED CSV data
          async function fetchFredSeries(seriesId) {
            const url = `https://fred.stlouisfed.org/graph/fredgraph.csv?id=${seriesId}`;
            console.log('→ FRED:', seriesId);
            try {
              const text = await fetchUrl(url);
              if (!text || !text.includes(',')) throw new Error('Invalid CSV');
              const lines = text.trim().split('\n');
              const data = {};
              for (let i = 1; i < lines.length; i++) {
                const [date, value] = lines[i].split(',');
                if (!date || !value || value === '.') continue;
                if (date >= cutoffStr) {
                  const num = parseFloat(value);
                  if (!isNaN(num)) data[date] = num;
                }
              }
              return data;
            } catch (err) {
              console.error(`❌ FRED ${seriesId}:`, err.message);
              return {};
            }
          }

          // Example fallback: simple free API mock (you can replace with real API)
          async function fetchApiSeries(code) {
            const url = `https://api.worldgovernmentbonds.com/${code}.csv`; // <-- replace with real endpoint
            console.log('→ API:', code);
            try {
              const text = await fetchUrl(url);
              if (!text || !text.includes(',')) throw new Error('Invalid API CSV');
              const lines = text.trim().split('\n');
              const data = {};
              for (let i = 1; i < lines.length; i++) {
                const [date, value] = lines[i].split(',');
                if (!date || !value || value === '.') continue;
                if (date >= cutoffStr) {
                  const num = parseFloat(value);
                  if (!isNaN(num)) data[date] = num;
                }
              }
              return data;
            } catch (err) {
              console.error(`⚠️ API ${code}:`, err.message);
              return {};
            }
          }

          // Main
          (async () => {
            const allData = {};

            for (const [group, countries] of Object.entries(config)) {
              allData[group] = {};

              for (const [country, entry] of Object.entries(countries)) {
                let seriesData = {};
                if (!entry) continue;

                const fredId = typeof entry === 'string' ? entry : entry.fred;
                const apiCode = typeof entry === 'object' ? entry.api : null;

                if (fredId) {
                  seriesData = await fetchFredSeries(fredId);
                }

                // fallback to API if FRED empty
                if ((!seriesData || Object.keys(seriesData).length === 0) && apiCode) {
                  seriesData = await fetchApiSeries(apiCode);
                }

                allData[group][country] = seriesData;
                await new Promise(r => setTimeout(r, 800));
              }
            }

            fs.writeFileSync('./data/cds-proxies.json', JSON.stringify(allData, null, 2));
            console.log('✅ Data saved!');
          })();
          EOF

      - name: Run script
        run: node scripts/fetch-cds-data.js

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/cds-proxies.json
          if ! git diff --quiet HEAD; then
            git commit -m "chore: auto-update CDS proxy data $(date -u +'%Y-%m-%d')"
            git push
          else
            echo "No changes"
          fi

